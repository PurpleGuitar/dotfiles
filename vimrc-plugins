" Vundle and plugins
" ========================================================================

" Vundle not installed?  Here's how to get it set up:
" 1. mkdir -p ~/.vim/bundle
" 2. cd ~/.vim/bundle
" 3. git clone https://github.com/VundleVim/Vundle.vim.git
" 4. Start Vim
" 5. :PluginInstall
" 6. Happy Vimming!

" Helpful Vundle commands:
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" see :h vundle for more details or wiki for FAQ
set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" ========================================================================
" START VUNDLE PLUGINS
" ========================================================================
" (Vundle.vim must always be first)
Plugin 'gmarik/Vundle.vim'                 " Vundle vundles Vundle


" ========================================================================
" Plugins that don't need configuring
" ========================================================================
Plugin 'PurpleGuitar/vim-croz-colorscheme' " Craig's color scheme
Plugin 'tpope/vim-sensible'                " Sensible defaults for vim settings
Plugin 'tpope/vim-fugitive'                " Git integration (:GStatus, :GPush, etc.)
Plugin 'tpope/vim-unimpaired'              " Shortcuts, such as ]b (:bnext), ]q (:cnext), an ]e (exchange line)
Plugin 'tomtom/tcomment_vim'               " Sophisticated commenting, e.g. Ctrl-// to comment
Plugin 'guns/xterm-color-table.vim'        " Display a color chart of XTerm color codes
Plugin 'vim-voom/VOoM'                     " Outliner for use with e.g. Pandoc/Markdown text files
Plugin 'tmux-plugins/vim-tmux'             " Syntax support for tmux files
Plugin 'pangloss/vim-javascript'           " Syntax handler for JavaScript
Plugin 'elzr/vim-json'                     " Syntax handling for JSON
Plugin 'nblock/vim-dokuwiki'               " Syntax highlighting for Dokuwiki text files
Plugin 'Raimondi/delimitMate'              " Automatically close quote, parens, brackets, etc.
Plugin 'tommcdo/vim-exchange'              " Exchange chunks of text
Plugin 'kshenoy/vim-signature'             " Show marks in gutter
Plugin 'tpope/vim-speeddating'             " Increment/decrement dates
Plugin 'kergoth/vim-hilinks'               " Show highlighting at the cursor


" ========================================================================
" Easy Align
" ========================================================================
Plugin 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)


" ========================================================================
" Syntastic
" ========================================================================
Plugin 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0


" ========================================================================
" Airline (Powerline)
" ========================================================================
Plugin 'vim-airline/vim-airline.git'
Plugin 'vim-airline/vim-airline-themes.git'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1


" ========================================================================
" Git Gutter
" ========================================================================
Plugin 'airblade/vim-gitgutter'
let g:gitgutter_sign_column_always = 1
nmap [h <Plug>GitGutterPrevHunk
nmap ]h <Plug>GitGutterNextHunk


" ========================================================================
" Pandoc
" ========================================================================
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
let g:pandoc#formatting#mode = 'h'                               " hard line breaks
let g:pandoc#keyboard#sections#header_style = 's'                " Use setext style headers for 1 and 2
let g:pandoc#formatting#textwidth = 75                           " Text width for Pandoc documents
let g:pandoc#folding#level=999                                   " Don't initally fold docs
let g:pandoc#syntax#conceal#blacklist = ["emdashes", "endashes"] " Don't show dashes (they're invisible)
let g:pandoc#folding#fdc = 0                                     " Don't show foldlevel column
let g:pandoc#formatting#equalprg='pandoc -t markdown --standalone --columns 75'

let g:pandoc_indent_on_write = 1
function! PandocIndentOnWrite()
    if &ft == 'pandoc' && g:pandoc_indent_on_write == 1
        let save_cursor = getpos('.')
        normal! H
        let save_window = getpos('.')
        :normal! gg=G
        call setpos('.', save_window)
        normal! zt
        call setpos('.', save_cursor)
    endif
endfunction
function! PandocUpdateNoIndent()
    let g:pandoc_indent_on_write = 0
    update
    let g:pandoc_indent_on_write = 1
endfunction
autocmd BufWritePre * call PandocIndentOnWrite()
autocmd FileType pandoc inoremap <C-s> :call PandocUpdateNoIndent()<CR>

" Use tab to jump to next link
autocmd FileType pandoc nnoremap <Tab> /\[[^]]\+\][[(]\<bar><[^>]\+><CR>:nohlsearch<CR>
autocmd FileType pandoc nnoremap <S-Tab> ?\[[^]]\+\][[(]\<bar><[^>]\+><CR>:nohlsearch<CR>

" Remap goto definition to goto link
autocmd FileType pandoc nmap gd <Leader>gl

" Show line breaks
autocmd FileType pandoc set showbreak=....

" Shortcuts for generating pandoc docs
autocmd FileType pandoc nnoremap <Leader>pp  :Pandoc  html --standalone<CR>
autocmd FileType pandoc nnoremap <Leader>pb  :Pandoc! html --standalone<CR>


" ========================================================================
" Pandoc Tasks - task management in Pandoc
" ========================================================================
Plugin  'PurpleGuitar/vim-pandoc-tasks'
autocmd FileType pandoc nnoremap <Leader>tx  :PandocTaskDelete<CR>
autocmd FileType pandoc vnoremap <Leader>tx  :PandocTaskDelete<CR>gv
autocmd FileType pandoc nnoremap <NUL>       :PandocTaskToggle<CR>
autocmd FileType pandoc vnoremap <NUL>       :PandocTaskToggle<CR>gv
autocmd FileType pandoc nnoremap <C-Space>   :PandocTaskToggle<CR>
autocmd FileType pandoc vnoremap <C-Space>   :PandocTaskToggle<CR>gv
autocmd FileType pandoc nnoremap <Leader>tl  :PandocTaskListTodo<CR>
autocmd FileType pandoc nnoremap <Leader>tlj :PandocTaskListTodo<CR>:cc<CR>
autocmd FileType pandoc nnoremap <Leader>tn  :PandocTaskListTodoSorted<CR>
autocmd FileType pandoc nnoremap <Leader>tnj :PandocTaskListTodoSorted<CR>:cc<CR>
autocmd FileType pandoc nnoremap <Leader>tu  :PandocTaskListUnfinished<CR>
autocmd FileType pandoc nnoremap <Leader>tun :PandocTaskListUnfinishedSorted<CR>
autocmd FileType pandoc nnoremap <Leader>td  :PandocTaskListDoneSorted<CR>

" Special commands for todoing
autocmd FileType pandoc nnoremap <Leader>tla   :cd ~/Documents/todo<CR>:PandocTaskListTodo             'project/**/*.md', 'journal/**/*.md'<CR>
autocmd FileType pandoc nnoremap <Leader>tna   :cd ~/Documents/todo<CR>:PandocTaskListTodoSorted       'project/**/*.md', 'journal/**/*.md'<CR>
autocmd FileType pandoc nnoremap <Leader>tnaj  :cd ~/Documents/todo<CR>:PandocTaskListTodoSorted       'project/**/*.md', 'journal/**/*.md'<CR>:cc<CR>
autocmd FileType pandoc nnoremap <Leader>tua   :cd ~/Documents/todo<CR>:PandocTaskListUnfinished       'project/**/*.md', 'journal/**/*.md'<CR>
autocmd FileType pandoc nnoremap <Leader>tuna  :cd ~/Documents/todo<CR>:PandocTaskListUnfinishedSorted 'project/**/*.md', 'journal/**/*.md'<CR>
autocmd FileType pandoc nnoremap <Leader>tunaj :cd ~/Documents/todo<CR>:PandocTaskListUnfinishedSorted 'project/**/*.md', 'journal/**/*.md'<CR>:cc<CR>
autocmd FileType pandoc nnoremap <Leader>tda   :cd ~/Documents/todo<CR>:PandocTaskListDoneSorted       'project/**/*.md', 'journal/**/*.md'<CR>

" Create insta-journal-entry for quick notes
function! s:new_journal_entry()
    let timestamp_filename = strftime( "~/Documents/todo/journal/%Y-%m-%d_%H-%M-%S.md", localtime() )
    execute "e " . timestamp_filename
endfunction
command! NewJournalEntry call s:new_journal_entry()
autocmd FileType pandoc nnoremap <Leader>nje  :NewJournalEntry<CR>

" Make quickfix list pretty
function! s:todo_quickfix(command_name)
    copen
    cd ~/Documents/todo
    execute a:command_name . " 'project/**/*.md', 'journal/**/*.md'"
    setlocal modifiable
    1,$EasyAlign 4/ /
    setlocal nomodifiable
    setlocal nomodified
endfunction
command! TodoQuickfix call s:todo_quickfix('PandocTaskListTodoSorted')
command! TodoQuickfixAll call s:todo_quickfix('PandocTaskListUnfinishedSorted')
nnoremap <Leader>tq :TodoQuickfix<CR>
nnoremap <Leader>qt :TodoQuickfix<CR>
nnoremap <Leader>tqa :TodoQuickfixAll<CR>
nnoremap <Leader>qta :TodoQuickfixAll<CR>

" ========================================================================
" NERDTree file browser
" ========================================================================
Plugin 'scrooloose/nerdtree'
nnoremap <Leader>nt :NERDTreeFind<CR>


" From: http://superuser.com/questions/195022/vim-how-to-synchronize-nerdtree-with-current-opened-tab-file-path
" returns true iff is NERDTree open/active
function! s:isNTOpen()
  return exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
endfunction

" calls NERDTreeFind iff NERDTree is active, current window contains a modifiable file, and we're not in vimdiff
function! s:syncTree()
  if &modifiable && s:isNTOpen() && strlen(expand('%')) > 0 && !&diff
    let l:curwinnr = winnr()
    NERDTreeFind
    exec l:curwinnr . "wincmd w"
    "wincmd p
  endif
endfunction

autocmd BufEnter * call s:syncTree()


" ========================================================================
" Quick Scope - Highlights targets for f, F, t, and T motions
" ========================================================================
Plugin 'unblevable/quick-scope'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']


" ========================================================================
" Gundo -- navigate undo tree
" ========================================================================
Plugin 'sjl/gundo.vim'
nnoremap <Leader>gu :GundoToggle<CR>



" ========================================================================
" Xolox shell - supports fullscreen, among other things
" ========================================================================
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-shell'
let g:shell_fullscreen_always_on_top = 0


" ========================================================================
" END VUNDLE PLUGINS
" ========================================================================
call vundle#end()
filetype plugin indent on


