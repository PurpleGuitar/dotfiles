" Vundle and plugins
" ========================================================================


" ========================================================================
" START VUNDLE PLUGINS
" ========================================================================
" (Vundle.vim must always be first)
Plugin 'gmarik/Vundle.vim'                 " Vundle vundles Vundle

" ========================================================================
" Plugins that don't need configuring
" ========================================================================

" The Essentials
Plugin 'PurpleGuitar/vim-croz-colorscheme' " Craig's color scheme
Plugin 'tpope/vim-sensible'                " Sensible defaults for vim settings

" Making Editing a Pleasure
Plugin 'tpope/vim-unimpaired'              " Shortcuts, such as ]b (:bnext), ]q (:cnext), an ]e (exchange line)
Plugin 'tomtom/tcomment_vim'               " Sophisticated commenting, e.g. Ctrl-// to comment
Plugin 'Raimondi/delimitMate'              " Automatically close quote, parens, brackets, etc.
Plugin 'kshenoy/vim-signature'             " Show marks in gutter
Plugin 'tpope/vim-abolish'                 " Tools for smart replace, mangling/demangling, camelCasing, etc.
Plugin 'tommcdo/vim-exchange'              " Exchange chunks of text
Plugin 'tpope/vim-vinegar'                 " Make netrw better

" Language Syntaxes
Plugin 'tmux-plugins/vim-tmux'             " Syntax support for tmux files
Plugin 'OrangeT/vim-csharp'                " Syntax support for C# files
Plugin 'leafgarland/typescript-vim'        " Syntax for typescript
Plugin 'udalov/kotlin-vim'                 " Syntax for Kotlin
Plugin 'rust-lang/rust.vim'                " Rust language support
Plugin 'PProvost/vim-ps1'                  " PowerShell language support
Plugin 'fatih/vim-go'                      " Golang development
Plugin 'keith/swift.vim'                   " Swift syntax highlighting
Plugin 'kovisoft/slimv'                    " LISP development

" Other Stuff
Plugin 'mbbill/undotree'                   " Visual undo
Plugin 'tpope/vim-fugitive'                " Git integration (:GStatus, :GPush, etc.)
Plugin 'guns/xterm-color-table.vim'        " Display a color chart of XTerm color codes
Plugin 'severin-lemaignan/vim-minimap'     " Silly but fun

" Experimental
Plugin 'ciaranm/securemodelines'           " Lock down modelines

" ========================================================================
" Tagbar
" ========================================================================
Plugin 'majutsushi/tagbar'                 " Sidebar for code
let g:tagbar_sort = 0
let g:tagbar_iconchars = ['+', '-']

if has('win32')
    let g:tagbar_type_pandoc = {
        \ 'ctagstype': 'pandoc',
        \ 'ctagsbin' : 'python',
        \ 'ctagsargs' : 'C:\Users\oliverc\Programs\markdown2ctags\markdown2ctags.py -f - --sort=yes',
        \ 'kinds' : [
            \ 's:sections',
            \ 'i:images'
        \ ],
        \ 'sro' : '|',
        \ 'kind2scope' : {
            \ 's' : 'section',
        \ },
        \ 'sort': 0,
    \ }
elseif has('unix')
    " sudo pip3 install markdown2ctags
    let g:tagbar_type_pandoc = {
        \ 'ctagstype': 'pandoc',
        \ 'ctagsbin' : 'markdown2ctags',
        \ 'ctagsargs' : '-f - --sort=yes',
        \ 'kinds' : [
            \ 's:sections',
            \ 'i:images'
        \ ],
        \ 'sro' : '|',
        \ 'kind2scope' : {
            \ 's' : 'section',
        \ },
        \ 'sort': 0,
    \ }
endif



" ========================================================================
" Easy Align
" ========================================================================
Plugin 'junegunn/vim-easy-align'
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" Remap normal ga (display info of character under cursor)
nnoremap <leader>ga ga


" ========================================================================
" Git Gutter
" ========================================================================
Plugin 'airblade/vim-gitgutter'
if exists('&signcolumn')  " Vim 7.4.2201
    setlocal signcolumn=yes
else
    let g:gitgutter_sign_column_always = 1
endif"
nmap [h <Plug>(GitGutterPrevHunk)
nmap ]h <Plug>(GitGutterNextHunk)


" ========================================================================
" Pandoc
" ========================================================================
Plugin 'vim-pandoc/vim-pandoc'
Plugin 'vim-pandoc/vim-pandoc-syntax'
Plugin 'vim-voom/VOoM'
autocmd FileType voomtree setlocal nonumber

" Setup pandoc
let g:pandoc#formatting#mode = 'h'                               " hard line breaks
let g:pandoc#keyboard#sections#header_style = 's'                " Use setext style headers for 1 and 2
let g:pandoc#formatting#textwidth = 75                           " Text width for Pandoc documents
let g:pandoc#folding#level = 999
let g:pandoc#syntax#conceal#blacklist = ["emdashes", "endashes", "newline", "image"]
let g:pandoc#folding#fdc = 0                                     " Don't show foldlevel column
let g:pandoc#formatting#equalprg='pandoc -t markdown --standalone --columns 75'
let g:pandoc#formatting#extra_equalprg=''
let g:pandoc#folding#fold_yaml = 1
let g:pandoc#syntax#conceal#urls = 1

" " Use tab to jump to next link
autocmd FileType pandoc nnoremap <Tab> /\[\zs[^]]\+\][[(]\<bar><[^!>]\+><CR>:nohlsearch<CR>
autocmd FileType pandoc nnoremap <S-Tab> ?\[\zs[^]]\+\][[(]\<bar><[^!>]\+><CR>:nohlsearch<CR>

" Linewise movement in pandoc
autocmd FileType pandoc nnoremap j gj
autocmd FileType pandoc nnoremap k gk
autocmd FileType pandoc vnoremap j gj
autocmd FileType pandoc vnoremap k gk

" Shortcuts for generating pandoc docs
autocmd FileType pandoc nnoremap <Leader>pp  :update<CR>:!pandoc --standalone --css=style.css --to=html --out="%:r.html" "%"<CR>
autocmd FileType pandoc nnoremap <Leader>pf  :let @l=line(".")<CR>:%!pandoc --standalone --to=markdown<CR>:<C-r>l<CR>zz

" Shortcuts for following pandoc links
autocmd FileType pandoc nmap <CR> <Plug>(pandoc-keyboard-links-open)

if has('win32')
    autocmd FileType pandoc nnoremap <Leader>pb  :update<CR>:!pandoc --standalone --css=style.css --to=html --out=%:r.html "%"<CR>:!start "%:r.html"<CR>
elseif has('unix')
    autocmd FileType pandoc nnoremap <Leader>pb  :update<CR>:!pandoc --standalone --css=style.css --to=html --out=%:r.html "%"<CR>:!xdg-open "%:r.html" &<CR>
endif

" Other settings
autocmd FileType pandoc setlocal nowrap
autocmd FileType pandoc setlocal nonumber
autocmd FileType pandoc setlocal sidescrolloff=0

" New task management
function! PandocToggleTask()
    let line = getline('.')
    " [ ] -> [x]
    let match = matchstr(line, '\[ \]')
    if match != ""
        let line = substitute(line, '\[ \]', '[x]', '')
        call setline('.', line)
        return
    endif
    " [x] -> [ ], [X] -> [ ]
    let match = matchstr(line, '\[[xX]\]')
    if match != ""
        let line = substitute(line, '\[[xX]\]', '[ ]', '')
        call setline('.', line)
        return
    endif
    " - text -> - [ ] text
    let match = matchstr(line, '- ')
    if match != ""
        let line = substitute(line, '- ', '- [ ] ', '')
        call setline('.', line)
        return
    endif
endfunction
autocmd FileType pandoc nnoremap <NUL> :call PandocToggleTask()<CR>
nnoremap <Leader>tt :execute "vimgrep '\\[ \\]' *.md"<CR>
nnoremap <Leader>ts :execute "vimgrep '\\[ \\]' *.md"<CR>:SortQuickFix<CR>:cc<CR>

" ========================================================================
" Quick Scope - Highlights targets for f, F, t, and T motions
" ========================================================================
Plugin 'unblevable/quick-scope'
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']


" ========================================================================
" Buffer Explorer
" ========================================================================
Plugin 'jlanzarotta/bufexplorer'           " Buffer explorer
nmap _ \be

" ========================================================================
" Experimentation
" ========================================================================

" Plugin 'PurpleGuitar/pandoc-wiki-utils'
" let g:pw_create_mappings=1
" Plugin 'vimwiki/vimwiki'
" let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
