#!/bin/bash

# The following environment variables are respected by this prompt:
# PROMPT_USE_UNICODE: if set, use Unicode symbols in the prompt.
# PROMPT_NO_DISPLAY: If set, the prompt will not show a warning if DISPLAY is not set.

# Bash prompt constants
SPACE=' '
NEWLINE='\n'
WORKING_DIRECTORY='\w'
WORKING_DIRECTORY_BASENAME='\W'
USERNAME='\u'
HOSTNAME='\h'
HISTORY_NUMBER='\!'
PROMPT_CHARACTER='\$'
TIME_AMPM='\@'

# Window constants
WINDOW_TITLE_BEGIN="\[\e]0;"
WINDOW_TITLE_END="\a\]"

# Color constants
COLOR_BLACK="\[\e[0;30m\]"
COLOR_DARK_GRAY="\[\e[1;30m\]"
COLOR_RED="\[\e[0;31m\]"
COLOR_LIGHT_RED="\[\e[1;31m\]"
COLOR_GREEN="\[\e[0;32m\]"
COLOR_LIGHT_GREEN="\[\e[1;32m\]"
COLOR_YELLOW="\[\e[0;33m\]"
COLOR_LIGHT_YELLOW="\[\e[1;33m\]"
COLOR_BLUE="\[\e[0;34m\]"
COLOR_LIGHT_BLUE="\[\e[1;34m\]"
COLOR_MAGENTA="\[\e[0;35m\]"
COLOR_LIGHT_MAGENTA="\[\e[1;35m\]"
COLOR_CYAN="\[\e[0;36m\]"
COLOR_LIGHT_CYAN="\[\e[1;36m\]"
COLOR_LIGHT_GRAY="\[\e[0;37m\]"
COLOR_WHITE="\[\e[1;37m\]"
COLOR_RESET="\[\e[0;0m\]"

# Meta-colors
COLOR_THEME=${COLOR_GREEN}
COLOR_THEME_LIGHT=${COLOR_LIGHT_GREEN}
COLOR_NOTE=${COLOR_DARK_GRAY}
COLOR_STATUS=${COLOR_CYAN}
COLOR_WARN=${COLOR_YELLOW}
COLOR_ALERT=${COLOR_RED}

# CPU load information
if [[ -r /proc/cpuinfo ]] && [[ -r /proc/loadavg ]]; then
    SYSLOAD_DISPLAY="true"
    SYSLOAD_NUM_CPU_CORES=$(grep -c ^processor /proc/cpuinfo)
    SYSLOAD_THRESHOLD_WARN=$((   70 * ${SYSLOAD_NUM_CPU_CORES} ))
    SYSLOAD_THRESHOLD_ALERT=$(( 100 * ${SYSLOAD_NUM_CPU_CORES} ))
fi

# Total system memory
if [[ -r /proc/meminfo ]] && cat /proc/meminfo | grep -q MemAvailable; then
    SYSMEM_DISPLAY="true"
    SYSMEM_AVAILABLE_MAX=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}')
    SYSMEM_AVAILABLE_THRESHOLD_WARN=$((  ${SYSMEM_AVAILABLE_MAX} * 20 / 100 ))
    SYSMEM_AVAILABLE_THRESHOLD_ALERT=$(( ${SYSMEM_AVAILABLE_MAX} * 10 / 100 ))
fi

# Flag strings
if [[ ${PROMPT_USE_UNICODE} ]]; then
    STR_NO_DISPLAY="✘"
    STR_RCODE="☹"
    STR_SHLVL="»"
    STR_SYSLOAD="⚒"
    STR_SYSMEM="✎"
    STR_TMUX_SESSIONS="◫"
else
    STR_NO_DISPLAY="nox"
    STR_RCODE="rc:"
    STR_SHLVL="shlvl:"
    STR_SYSLOAD="load:"
    STR_SYSMEM="mem<"
    STR_TMUX_SESSIONS="tmuxs:"
fi

# Prompt command function.
PROMPT_COMMAND="__prompt_command; ${PROMPT_COMMAND}"
__prompt_command() {
# (We don't indent the contents because we're using continuation strings.)

# Get return code from last command.
local RC_OF_LAST_COMMAND="$?"

# Start with empty prompt
PS1=""

# Window title: "~ user@host"
PS1+="${WINDOW_TITLE_BEGIN}\
${WORKING_DIRECTORY_BASENAME}\
${SPACE}\
${USERNAME}@${HOSTNAME}\
${WINDOW_TITLE_END}"

# Newline
PS1+="${NEWLINE}"

# User@host
PS1+="${COLOR_THEME}${USERNAME}@${HOSTNAME}${COLOR_RESET}"

# Alert return code of last command, if non-zero
if [ ${RC_OF_LAST_COMMAND} != 0 ]; then
    PS1+="${SPACE}${COLOR_ALERT}${STR_RCODE}${RC_OF_LAST_COMMAND}${COLOR_RESET}"
fi

# Warn or alert CPU load, if too high
if [ ${SYSLOAD_DISPLAY} ]; then
    CPU_LOAD=$(cat /proc/loadavg | cut -d " " -f 1)
    NORMALIZED_CPU_LOAD=${CPU_LOAD//./}
    if [ ${NORMALIZED_CPU_LOAD} -gt ${SYSLOAD_THRESHOLD_ALERT} ]; then
        PS1+="${SPACE}${COLOR_ALERT}${STR_SYSLOAD}${CPU_LOAD}${COLOR_RESET}"
    elif [ ${NORMALIZED_CPU_LOAD} -gt ${SYSLOAD_THRESHOLD_WARN} ]; then
        PS1+="${SPACE}${COLOR_WARN}${STR_SYSLOAD}${CPU_LOAD}${COLOR_RESET}"
    fi
fi

# Warn or alert memory load, if too high
if [ ${SYSMEM_DISPLAY} ]; then
    SYSMEM_AVAILABLE=$(( $(cat /proc/meminfo | grep MemAvailable | awk '{print $2}') ))
    if [ ${SYSMEM_AVAILABLE} -lt ${SYSMEM_AVAILABLE_THRESHOLD_ALERT} ]; then
        SYSMEM_AVAILABLE_MB=$(( ${SYSMEM_AVAILABLE} / 1000 ))
        PS1+="${SPACE}${COLOR_ALERT}${STR_SYSMEM}${SYSMEM_AVAILABLE_MB}MB${COLOR_RESET}"
    elif [ ${SYSMEM_AVAILABLE} -lt ${SYSMEM_AVAILABLE_THRESHOLD_WARN} ]; then
        SYSMEM_AVAILABLE_MB=$(( ${SYSMEM_AVAILABLE} / 1000 ))
        PS1+="${SPACE}${COLOR_WARN}${STR_SYSMEM}${SYSMEM_AVAILABLE_MB}MB${COLOR_RESET}"
    fi
fi

# Warn if DISPLAY is not set
if [ -z ${DISPLAY} ] && [ -z ${PROMPT_NO_DISPLAY} ]; then
    PS1+="${SPACE}${COLOR_WARN}${STR_NO_DISPLAY}${COLOR_RESET}"
fi

# Git branch if available
if hash __git_ps1 2>/dev/null ; then
    # export GIT_PS1_SHOWDIRTYSTATE=Y
    # export GIT_PS1_SHOWSTASHSTATE=Y
    # export GIT_PS1_SHOWUNTRACKEDFILES=Y
    # export GIT_PS1_SHOWUPSTREAM=Y
    PS1+="${COLOR_STATUS}$(__git_ps1)${COLOR_RESET}"
fi

# Note shell depth, if greater than 1
if [ ${SHLVL} -gt 1 ]; then
    PS1+="${SPACE}${COLOR_NOTE}${STR_SHLVL}${SHLVL}${COLOR_RESET}"
fi

# Note number of tmux sessions, if greater than 1
TMUX_SESSION_COUNT=$(tmux ls | wc -l)
if [ ${TMUX_SESSION_COUNT} -gt 1 ]; then
    PS1+="${SPACE}${COLOR_NOTE}${STR_TMUX_SESSIONS}${TMUX_SESSION_COUNT}${COLOR_RESET}"
fi

# Time of prompt
PS1+="${SPACE}${COLOR_NOTE}${TIME_AMPM}${COLOR_RESET}"

# Newline
PS1+="${NEWLINE}"

# Working directory
PS1+="${COLOR_THEME_LIGHT}${WORKING_DIRECTORY}${COLOR_RESET}"

# Newline
PS1+="${NEWLINE}"

# Prompt
PS1+="${PROMPT_CHARACTER}${SPACE}"

}

# vim: filetype=sh
